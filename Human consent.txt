You're absolutely right - requiring human consent before executing potentially impactful actions like API calls is crucial for safety and control. Let's enhance the conversational agent to incorporate a clear consent flow before executing actions. Here's how we can implement this:

## Implementing Human Consent Flow

```python
# Add a consent management system to the state
class ConversationalAgentState(TypedDict):
    messages: List[Dict[str, Any]]
    incident_id: Optional[str]
    customer_data: Optional[Dict[str, Any]]
    historical_result: Optional[Dict[str, Any]]
    traversal_path: Optional[List[str]]
    available_apis: Dict[str, Dict[str, Any]]
    api_results: Dict[str, Any]
    additional_context: Dict[str, Any]
    # New fields for consent management
    pending_action: Optional[Dict[str, Any]]  # Store action awaiting consent
    consent_state: Optional[str]  # Can be "awaiting", "approved", "denied", None

# Modify the conversational action worker to handle consent
def conversational_action_worker(state: ConversationalAgentState) -> ConversationalAgentState:
    """
    Worker that handles all interaction after historical agent processing,
    with human consent flow for actions
    """
    # Extract messages and last message
    messages = state["messages"]
    last_message = messages[-1] if messages else {"content": ""}
    
    # Skip if not a user message
    if last_message.get("role") != "user":
        return state
    
    # Check if we're waiting for consent
    pending_action = state.get("pending_action")
    consent_state = state.get("consent_state")
    
    # If we're awaiting consent, process the user's response
    if consent_state == "awaiting" and pending_action:
        user_message = last_message["content"].lower()
        
        # Check for approval or denial
        affirmative_responses = ["yes", "sure", "approve", "confirmed", "go ahead", "proceed", "ok", "okay", "do it", "execute", "run it"]
        negative_responses = ["no", "don't", "stop", "wait", "cancel", "deny", "negative", "hold on", "abort"]
        
        if any(response in user_message for response in affirmative_responses):
            # User approved the action
            new_state = {**state, "consent_state": "approved"}
            return execute_pending_action(new_state)
        
        elif any(response in user_message for response in negative_responses):
            # User denied the action
            response = "I've cancelled the action. What would you like to do instead?"
            return {
                **state,
                "messages": messages + [{"role": "assistant", "content": response}],
                "pending_action": None,
                "consent_state": None
            }
        
        else:
            # Unclear response, ask again
            response = f"I need your clear confirmation before proceeding with the {pending_action.get('action_type', 'action')}. Please respond with 'yes' to approve or 'no' to cancel."
            return {
                **state,
                "messages": messages + [{"role": "assistant", "content": response}]
            }
    
    # Normal processing for new user messages
    # Get context from historical agent
    historical_result = state.get("historical_result", {})
    incident_id = state.get("incident_id")
    
    if not historical_result or not incident_id:
        response = "I need more context about the incident. Could you provide an incident number first?"
        return {
            **state,
            "messages": messages + [{"role": "assistant", "content": response}]
        }
    
    # Create agent with context
    agent = create_conversational_agent(state)
    
    # Prepare input for agent
    agent_input = {"input": last_message["content"]}
    
    # Execute agent
    try:
        agent_result = agent.invoke(agent_input)
        
        # Check if an API execution is being attempted
        api_execution_attempted = False
        api_details = {}
        
        for step in agent_result.get("intermediate_steps", []):
            tool = step[0]
            if tool.tool == "execute_api":
                api_execution_attempted = True
                # Extract API details
                if isinstance(tool.tool_input, str):
                    api_input = json.loads(tool.tool_input)
                else:
                    api_input = tool.tool_input
                
                api_details = {
                    "action_type": "API Execution",
                    "api_name": api_input.get("api_name", "unknown"),
                    "parameters": api_input.get("parameters", {}),
                    "tool_input": tool.tool_input,
                    "description": get_api_description(api_input.get("api_name", "unknown"), state)
                }
                break
        
        if api_execution_attempted:
            # Intercept the execution and request consent
            return request_consent_for_action(state, api_details, agent_result["output"])
        
        # No API execution, proceed normally
        response = agent_result["output"]
        
        # Update state with the response
        return {
            **state,
            "messages": messages + [{"role": "assistant", "content": response}]
        }
    except Exception as e:
        # Handle errors
        error_message = str(e)
        response = f"I encountered an error while processing your request: {error_message}. Could you try rephrasing or specifying a different action?"
        
        return {
            **state,
            "messages": messages + [{"role": "assistant", "content": response}],
            "additional_context": {
                **state.get("additional_context", {}),
                "last_error": {
                    "message": error_message,
                    "timestamp": datetime.now().isoformat()
                }
            }
        }

def request_consent_for_action(state: ConversationalAgentState, action_details: Dict[str, Any], agent_output: str) -> ConversationalAgentState:
    """
    Request user consent for an action
    
    Args:
        state: Current state
        action_details: Details of the action requiring consent
        agent_output: Original output from the agent
        
    Returns:
        Updated state with consent request
    """
    api_name = action_details.get("api_name", "unknown")
    parameters = action_details.get("parameters", {})
    description = action_details.get("description", "No description available")
    
    # Create a consent request message
    consent_message = f"""
I need your approval before executing this action:

ACTION: {api_name}
DESCRIPTION: {description}
PARAMETERS: {json.dumps(parameters, indent=2)}
IMPACT: This will make changes to your system that may affect service operation.

Please respond with 'yes' to approve or 'no' to cancel this action.
"""
    
    # Update state with pending action and consent request
    return {
        **state,
        "messages": state["messages"] + [{"role": "assistant", "content": consent_message}],
        "pending_action": action_details,
        "consent_state": "awaiting"
    }

def execute_pending_action(state: ConversationalAgentState) -> ConversationalAgentState:
    """
    Execute an action that has received user consent
    
    Args:
        state: Current state with approved action
        
    Returns:
        Updated state with action results
    """
    pending_action = state.get("pending_action", {})
    api_name = pending_action.get("api_name", "unknown")
    tool_input = pending_action.get("tool_input", "{}")
    
    try:
        # Execute the API
        api_result = execute_api(tool_input)
        
        # Format a response with the results
        if api_result.get("success", False):
            response = f"""
I've successfully executed the {api_name} action.

RESULT:
{json.dumps(api_result.get("result", {}), indent=2)}

Would you like me to do anything else to help resolve this incident?
"""
        else:
            response = f"""
The {api_name} action failed with the following error:
{api_result.get("error", "Unknown error occurred")}

Would you like to try a different approach?
"""
        
        # Update API results in state
        api_results = state.get("api_results", {})
        timestamp = datetime.now().isoformat()
        api_results[f"{api_name}_{timestamp}"] = {
            "api_name": api_name,
            "parameters": pending_action.get("parameters", {}),
            "result": api_result,
            "timestamp": timestamp
        }
        
        # Return updated state
        return {
            **state,
            "messages": state["messages"] + [{"role": "assistant", "content": response}],
            "api_results": api_results,
            "pending_action": None,
            "consent_state": None
        }
    except Exception as e:
        # Handle execution errors
        error_message = str(e)
        response = f"""
I encountered an error while executing the {api_name} action:
{error_message}

Would you like to try again or take a different approach?
"""
        
        return {
            **state,
            "messages": state["messages"] + [{"role": "assistant", "content": response}],
            "pending_action": None,
            "consent_state": None,
            "additional_context": {
                **state.get("additional_context", {}),
                "last_error": {
                    "message": error_message,
                    "timestamp": datetime.now().isoformat()
                }
            }
        }

def get_api_description(api_name: str, state: ConversationalAgentState) -> str:
    """Get description for an API from available APIs"""
    available_apis = state.get("available_apis", {})
    api_info = available_apis.get(api_name, {})
    return api_info.get("description", f"Execute the {api_name} API")
```

## Enhancing the Agent Creation

Let's also update the agent creation function to ensure it doesn't execute APIs directly:

```python
def create_conversational_agent(state: ConversationalAgentState):
    """
    Creates a conversational agent with access to tools and historical context,
    configured to not execute APIs directly but to suggest them
    """
    # Extract relevant information from state as before...
    
    # Create a prompt that emphasizes consent
    prompt = ChatPromptTemplate.from_messages([
        ("system", f"""
You are an incident resolution specialist responding to user questions after a historical business rules analysis found no resolution.

CONTEXT FROM HISTORICAL ANALYSIS:
- Incident ID: {incident_id}
- Issue Type: {historical_result.get("issue_type", "Unknown")}
- Customer ID: {historical_result.get("customer_id", "Unknown")}
- Error Information: {historical_result.get("contextual_data", {}).get("error_code", "Unknown")}
- Affected Service: {historical_result.get("contextual_data", {}).get("affected_service", "Unknown")}
- Business Rules Traversed: {traversal_path_str}
- Reasoning: {historical_result.get("reasoning", "No resolution found in business rules")}

AVAILABLE RESOLUTION APIS:
{api_descriptions}

INSTRUCTIONS:
1. Help the user troubleshoot and resolve their incident
2. Use available tools to gather information
3. For data retrieval tools (fetch_customer_data, analyze_transaction_logs, get_service_status, find_similar_incidents), you can execute these directly
4. For system-modifying APIs (execute_api), you MUST:
   - Clearly explain what the API will do and why you suggest it
   - Show the exact parameters you would use
   - Format the API request properly
   - The system will handle getting user consent before execution

5. Be specific and precise in your responses
6. If you don't have enough information, ask clarifying questions
7. If you can't perform an action, explain clearly why not
8. Refer to similar past incidents when relevant

IMPORTANT: For execute_api calls specifically, you must format your tool inputs as a proper JSON string with 'api_name' and 'parameters' fields.
        """),
        ("human", "{input}")
    ])
    
    # Create a React agent with the consent-oriented prompt
    agent = create_react_agent(llm, tools, prompt)
    
    # Create an agent executor
    agent_executor = AgentExecutor(
        agent=agent, 
        tools=tools, 
        verbose=True,
        handle_parsing_errors=True,
        max_iterations=8
    )
    
    return agent_executor
```

## Example Usage with Consent Flow

Here's an example of how the conversation would flow with the consent mechanism:

```python
def example_with_consent_flow():
    """Example showing consent flow in action"""
    
    # Initialize with historical data
    historical_data = {
        "incident_id": "INC-2025-1234",
        "customer_id": "CUST-5678",
        "issue_type": "payment_processing_failure",
        "resolution": None,
        "reasoning": "No matching business rule found after traversing knowledge graph.",
        "traversal_path": ["payment_rules", "gateway_integration", "authentication_flow"],
        "contextual_data": {
            "affected_service": "payment_gateway",
            "error_code": "AUTH_FAILURE_503",
            "last_successful_transaction": "2025-05-06T23:15:42Z"
        }
    }
    
    # Initialize state
    state = initialize_from_historical_data(historical_data)
    
    # Sample conversation with consent flow
    conversation = [
        "Can you analyze the recent transaction logs?",  # Non-action query, no consent needed
        "Let's try rotating the API keys for the payment gateway",  # Action query, requires consent
        "yes",  # User approves the action
        "Now restart the payment gateway service",  # Another action query, requires consent
        "no",  # User denies this action
        "Let's try clearing the cache instead",  # Alternative action
        "yes"  # User approves
    ]
    
    # Process the conversation
    for i, message in enumerate(conversation):
        print(f"User: {message}")
        state = run_conversational_agent(message, state)
        print(f"Bot: {state['messages'][-1]['content']}\n")
        
        # Show state for debugging
        print(f"Consent State: {state.get('consent_state')}")
        print(f"Pending Action: {state.get('pending_action')}\n")
        
    return state
```

## Key Benefits of This Consent Implementation

1. **Clear Separation of Intent and Execution**:
   - Agent proposes actions but doesn't execute them without consent
   - User stays in control of all system-modifying operations

2. **Detailed Information for Informed Decisions**:
   - User sees exactly what API will be called and with what parameters
   - Description of the action and potential impact is provided

3. **Built-in Confirmation Dialog**:
   - Natural conversational confirmation flow
   - Recognizes various affirmative/negative responses

4. **Error Handling and Recovery**:
   - Manages unclear responses by asking again
   - Handles execution errors gracefully

5. **State Management**:
   - Tracks pending actions and consent state
   - Preserves context throughout the consent flow

This implementation ensures that users maintain control over sensitive operations while keeping the conversation natural. The agent can still perform non-invasive actions like data retrieval without interruption, but system-modifying operations require explicit approval.

Would you like me to enhance any specific part of this consent flow or explain any aspect in more detail?
